# -*- Thrax -*-

# Copyright 2016, 2017 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

c = SymbolTable['mul_034/Beng.syms'];
e = SymbolTable['mul_034/extra.syms'];
g = SymbolTable['mul_034/grapheme.syms'];

codepoint_to_grapheme =
  ("candrabindu".c : "~m".g)
| ("anusvara".c : ";m".g)
| ("visarga".c : ".h".g)
| ("a".c : "a".g)
| ("aa".c : "aa".g)
| ("i".c : "i".g)
| ("ii".c : "ii".g)
| ("u".c : "u".g)
| ("uu".c : "uu".g)
| ("vocalic_r".c : ",r".g)
| ("vocalic_l".c : ",l".g)
| ("e".c : "ee".g)
| ("ai".c : "ai".g)
| ("o".c : "oo".g)
| ("au".c : "au".g)
| ("ka".c : "k".g)
| ("kha".c : "kh".g)
| ("ga".c : "g".g)
| ("gha".c : "gh".g)
| ("nga".c : ";n".g)
| ("ca".c : "c".g)
| ("cha".c : "ch".g)
| ("ja".c : "j".g)
| ("jha".c : "jh".g)
| ("nya".c : "~n".g)
| ("tta".c : ".t".g)
| ("ttha".c : ".th".g)
| ("dda".c : ".d".g)
| ("ddha".c : ".dh".g)
| ("nna".c : ".n".g)
| ("ta".c : "t".g)
| ("tha".c : "th".g)
| ("da".c : "d".g)
| ("dha".c : "dh".g)
| ("na".c : "n".g)
| ("pa".c : "p".g)
| ("pha".c : "ph".g)
| ("ba".c : "b".g)
| ("bha".c : "bh".g)
| ("ma".c : "m".g)
| ("ya".c : "y".g)
| ("ra".c : "r".g)
| ("la".c : "l".g)
| ("sha".c : ";s".g)
| ("ssa".c : ".s".g)
| ("sa".c : "s".g)
| ("ha".c : "h".g)
| ("avagraha".c : "'".g)
| ("-aa".c : "aa".g)
| ("-i".c : "i".g)
| ("-ii".c : "ii".g)
| ("-u".c : "u".g)
| ("-uu".c : "uu".g)
| ("-vocalic_r".c : ",r".g)
| ("-vocalic_rr".c : ",rr".g)
| ("-e".c : "ee".g)
| ("-ai".c : "ai".g)
| ("-o".c : "oo".g)
| ("-au".c : "au".g)
| ("khanda_ta".c : "t^".g)
| ("rra".c : ".r".g)
| ("rha".c : ".rh".g)
| ("yya".c : ";y".g)
| ("vocalic_rr".c : ",rr".g)
| ("vocalic_ll".c : ",ll".g)
| ("-vocalic_l".c : ",l".g)
| ("-vocalic_ll".c : ",ll".g)
| ("ra_with_middle_diagonal".c : "r".g)
| ("ra_with_lower_diagonal".c : "w".g)
| ("0".c : "0".g)
| ("1".c : "1".g)
| ("2".c : "2".g)
| ("3".c : "3".g)
| ("4".c : "4".g)
| ("5".c : "5".g)
| ("6".c : "6".g)
| ("7".c : "7".g)
| ("8".c : "8".g)
| ("9".c : "9".g)
;

separator_c =
  "apostrophe".e
| "hyphen".e
| "letter_apostrophe".e
| "lsquo".e
| "rsquo".e
;

codepoint = Optimize[
  Project[codepoint_to_grapheme, 'input']
| "nukta".c
| "virama".c
| "-au_length".c
| "non-joiner".c
| "joiner".c
| separator_c
];

zw = "non-joiner".c | "joiner".c;

virama_g = "^".g;
ya_phalaa = "~y".g;
reph = "r^".g;
za = "z".g;
lla = ".l".g;

grapheme = Optimize[
  Project[codepoint_to_grapheme, 'output']
| "@".g
| "ERROR".g
| "-".g
| ".".g
| "non-joiner".g
| "joiner".g
| virama_g
| ya_phalaa
| reph
| za
| lla
];

star = Optimize[(codepoint | grapheme)*];

# Consonants, excluding dead consonants (khanda_ta, reph) and conjunct forms
# (ya_phalaa).
consonant =
  "ka".c  | "kha".c  | "ga".c  | "gha".c  | "nga".c
| "ca".c  | "cha".c  | "ja".c  | "jha".c  | "nya".c
| "tta".c | "ttha".c | "dda".c | "ddha".c | "nna".c
| "ta".c  | "tha".c  | "da".c  | "dha".c  | "na".c
| "pa".c  | "pha".c  | "ba".c  | "bha".c  | "ma".c
| "ya".c  | "ra".c   | "la".c
| "sha".c | "ssa".c  | "sa".c  | "ha".c
| "rra".c | "rha".c  | "yya".c
| "ra_with_middle_diagonal".c | "ra_with_lower_diagonal".c
| za | lla
;

dependent_vowel =
                   "-aa".c
| "-i".c         | "-ii".c
| "-u".c         | "-uu".c
| "-vocalic_r".c | "-vocalic_rr".c
| "-vocalic_l".c | "-vocalic_ll".c
|                  "-e".c          | "-ai".c
|                  "-o".c          | "-au".c
;

independent_vowel =
  "a".c          | "aa".c
| "i".c          | "ii".c
| "u".c          | "uu".c
| "vocalic_r".c  | "vocalic_rr".c
| "vocalic_l".c  | "vocalic_ll".c
|                  "e".c           | "ai".c
|                  "o".c           | "au".c
;

typos =
  ("ba nukta".c : "ra".c)
| ("vocalic_l".c : "9".c)
;

fix_typos =
  CDRewrite["a -aa".c : "aa".c, "", "", star]
@ CDRewrite[typos, "", "", star]
;

vowels_to_nfc_aux =
  ("-e -aa".c : "-o".c)
| ("-e -au_length".c : "-au".c)
;

vowels_to_nfc = CDRewrite[vowels_to_nfc_aux, "", "", star];

compose_dotted_aux =
  ("ja nukta".c : za)
| ("dda nukta".c : "rra".c)
| ("ddha nukta".c : "rha".c)
| ("ya nukta".c : "yya".c)
| ("la nukta".c : lla)
;

compose_dotted = CDRewrite[compose_dotted_aux, "", "", star];

# Change "ra virama" into reph at the beginning of a non-initial consonant
# cluster, i.e. is not preceded by virama and is followed by a consonant.
ins_reph = CDRewrite[
  "ra virama".c : reph,
  (codepoint - "virama".c) | za | lla,
  consonant | "khanda_ta".c | za | lla,
  star
];

# Change "virama ya" into ya_phalaa (medial ya) when it occurs as the last
# element of a cluster, i.e. is not followed by virama.
ins_medial_ya = CDRewrite[
  "virama ya".c : ya_phalaa,
  "",
  "[EOS]" | (codepoint - "virama".c) | (grapheme - (virama_g | ya_phalaa)),
  star
];

# Preserve (non-)joiner between "ka virama" and "ssa", which blocks the
# otherwise mandatory kṣ-ligature (ক্ষ).
preserve_zero_width = CDRewrite[
  ("non-joiner".c : "non-joiner".g) | ("joiner".c : "joiner".g),
  "ka virama".c,
  "ssa".c,
  star
];

del_zero_width = CDRewrite[zw : "", "", "", star];

ins_inherent_vowel = CDRewrite["" : "@".g, consonant | ya_phalaa, "", star];

explicit_vowel_or_virama = dependent_vowel | "virama".c | ya_phalaa;

del_inherent_vowel = CDRewrite["@".g : "", "", explicit_vowel_or_virama, star];

codepoints_to_graphemes_internal = Optimize[
  codepoint*
@ fix_typos
@ vowels_to_nfc
@ compose_dotted
@ ins_reph
@ ins_medial_ya
@ preserve_zero_width
@ del_zero_width
@ ins_inherent_vowel
@ del_inherent_vowel
];

# Add "." before independent vowels after a virama.
minimally_mark_independent_vowel = CDRewrite[
  "" : ".".g,
  "virama".c,
  independent_vowel,
  star
];

always_mark_independent_vowel = CDRewrite[
  "" : ".".g,
  "",
  independent_vowel,
  star
];

# Delete virama after consonants.
del_virama = CDRewrite["virama".c : "", consonant, "", star];

# Replace codepoints with graphemes.
to_graphemes_aux =
  codepoint_to_grapheme
| ("virama".c : virama_g)
| ("nukta".c : "ERROR".g)
| (separator_c : "-".g)
;

to_graphemes = CDRewrite[to_graphemes_aux, "", "", star];

export CODEPOINTS_TO_GRAPHEMES = Optimize[
  codepoints_to_graphemes_internal
@ minimally_mark_independent_vowel
@ del_virama
@ to_graphemes
@ CDRewrite["@".g : "a".g, "", "", star]
@ grapheme*
];

g2p_preprocess_aux =
  ("non-joiner".g : "-".g)
| ("joiner".g : "-".g)
| (reph : "r".g)
;

export G2P_PREPROCESS = Optimize[
  codepoints_to_graphemes_internal
@ always_mark_independent_vowel
@ del_virama
@ to_graphemes
@ CDRewrite[g2p_preprocess_aux, "", "", star]
@ ("": "BOS".g) grapheme* ("" : "EOS".g)
];
